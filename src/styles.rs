use eframe::egui::Color32;
use vte::ansi::Color as VteColor;

#[derive(Debug, Clone, Copy)]
pub enum Color {
    Black,
    Red,
    Green,
    Yellow,
    Blue,
    Magenta,
    Cyan,
    White,
    Gray,
    BrightRed,
    BrightGreen,
    BrightYellow,
    BrightBlue,
    BrightMagenta,
    BrightCyan,
    BrightWhite,
    Rgb(u8, u8, u8),
    Foreground,
    Background,
    ColorIndex(u8),
}

impl Color {
    pub fn from_vte_color(color: VteColor) -> Self {
        match color {
            VteColor::Named(named) => match named {
                vte::ansi::NamedColor::Black => Color::Black,
                vte::ansi::NamedColor::Red => Color::Red,
                vte::ansi::NamedColor::Green => Color::Green,
                vte::ansi::NamedColor::Yellow => Color::Yellow,
                vte::ansi::NamedColor::Blue => Color::Blue,
                vte::ansi::NamedColor::Magenta => Color::Magenta,
                vte::ansi::NamedColor::Cyan => Color::Cyan,
                vte::ansi::NamedColor::White => Color::White,
                vte::ansi::NamedColor::BrightBlack => Color::Gray,
                vte::ansi::NamedColor::BrightRed => Color::BrightRed,
                vte::ansi::NamedColor::BrightGreen => Color::BrightGreen,
                vte::ansi::NamedColor::BrightYellow => Color::BrightYellow,
                vte::ansi::NamedColor::BrightBlue => Color::BrightBlue,
                vte::ansi::NamedColor::BrightMagenta => Color::BrightMagenta,
                vte::ansi::NamedColor::BrightCyan => Color::BrightCyan,
                vte::ansi::NamedColor::BrightWhite => Color::BrightWhite,
                vte::ansi::NamedColor::DimBlack => Color::Gray,
                vte::ansi::NamedColor::DimRed => Color::Red,
                vte::ansi::NamedColor::DimGreen => Color::Green,
                vte::ansi::NamedColor::DimYellow => Color::Yellow,
                vte::ansi::NamedColor::DimBlue => Color::Blue,
                vte::ansi::NamedColor::DimMagenta => Color::Magenta,
                vte::ansi::NamedColor::DimCyan => Color::Cyan,
                vte::ansi::NamedColor::DimWhite => Color::White,
                vte::ansi::NamedColor::Foreground => Color::Foreground,
                vte::ansi::NamedColor::Background => Color::Background,
                _ => panic!("Unsupported named color"),
            },
            VteColor::Spec(rgb) => Color::Rgb(rgb.r, rgb.g, rgb.b),
            VteColor::Indexed(i) => Color::ColorIndex(i),
        }
    }

    pub fn default_array() -> [Color; 256] {
        [
            Color::Rgb(0, 0, 0),
            Color::Rgb(128, 0, 0),
            Color::Rgb(0, 128, 0),
            Color::Rgb(128, 128, 0),
            Color::Rgb(0, 0, 128),
            Color::Rgb(128, 0, 128),
            Color::Rgb(0, 128, 128),
            Color::Rgb(192, 192, 192),
            Color::Rgb(128, 128, 128),
            Color::Rgb(255, 0, 0),
            Color::Rgb(0, 255, 0),
            Color::Rgb(255, 255, 0),
            Color::Rgb(0, 0, 255),
            Color::Rgb(255, 0, 255),
            Color::Rgb(0, 255, 255),
            Color::Rgb(255, 255, 255),
            Color::Rgb(0, 0, 0),
            Color::Rgb(0, 0, 95),
            Color::Rgb(0, 0, 135),
            Color::Rgb(0, 0, 175),
            Color::Rgb(0, 0, 215),
            Color::Rgb(0, 0, 255),
            Color::Rgb(0, 95, 0),
            Color::Rgb(0, 95, 95),
            Color::Rgb(0, 95, 135),
            Color::Rgb(0, 95, 175),
            Color::Rgb(0, 95, 215),
            Color::Rgb(0, 95, 255),
            Color::Rgb(0, 135, 0),
            Color::Rgb(0, 135, 95),
            Color::Rgb(0, 135, 135),
            Color::Rgb(0, 135, 175),
            Color::Rgb(0, 135, 215),
            Color::Rgb(0, 135, 255),
            Color::Rgb(0, 175, 0),
            Color::Rgb(0, 175, 95),
            Color::Rgb(0, 175, 135),
            Color::Rgb(0, 175, 175),
            Color::Rgb(0, 175, 215),
            Color::Rgb(0, 175, 255),
            Color::Rgb(0, 215, 0),
            Color::Rgb(0, 215, 95),
            Color::Rgb(0, 215, 135),
            Color::Rgb(0, 215, 175),
            Color::Rgb(0, 215, 215),
            Color::Rgb(0, 215, 255),
            Color::Rgb(0, 255, 0),
            Color::Rgb(0, 255, 95),
            Color::Rgb(0, 255, 135),
            Color::Rgb(0, 255, 175),
            Color::Rgb(0, 255, 215),
            Color::Rgb(0, 255, 255),
            Color::Rgb(95, 0, 0),
            Color::Rgb(95, 0, 95),
            Color::Rgb(95, 0, 135),
            Color::Rgb(95, 0, 175),
            Color::Rgb(95, 0, 215),
            Color::Rgb(95, 0, 255),
            Color::Rgb(95, 95, 0),
            Color::Rgb(95, 95, 95),
            Color::Rgb(95, 95, 135),
            Color::Rgb(95, 95, 175),
            Color::Rgb(95, 95, 215),
            Color::Rgb(95, 95, 255),
            Color::Rgb(95, 135, 0),
            Color::Rgb(95, 135, 95),
            Color::Rgb(95, 135, 135),
            Color::Rgb(95, 135, 175),
            Color::Rgb(95, 135, 215),
            Color::Rgb(95, 135, 255),
            Color::Rgb(95, 175, 0),
            Color::Rgb(95, 175, 95),
            Color::Rgb(95, 175, 135),
            Color::Rgb(95, 175, 175),
            Color::Rgb(95, 175, 215),
            Color::Rgb(95, 175, 255),
            Color::Rgb(95, 215, 0),
            Color::Rgb(95, 215, 95),
            Color::Rgb(95, 215, 135),
            Color::Rgb(95, 215, 175),
            Color::Rgb(95, 215, 215),
            Color::Rgb(95, 215, 255),
            Color::Rgb(95, 255, 0),
            Color::Rgb(95, 255, 95),
            Color::Rgb(95, 255, 135),
            Color::Rgb(95, 255, 175),
            Color::Rgb(95, 255, 215),
            Color::Rgb(95, 255, 255),
            Color::Rgb(135, 0, 0),
            Color::Rgb(135, 0, 95),
            Color::Rgb(135, 0, 135),
            Color::Rgb(135, 0, 175),
            Color::Rgb(135, 0, 215),
            Color::Rgb(135, 0, 255),
            Color::Rgb(135, 95, 0),
            Color::Rgb(135, 95, 95),
            Color::Rgb(135, 95, 135),
            Color::Rgb(135, 95, 175),
            Color::Rgb(135, 95, 215),
            Color::Rgb(135, 95, 255),
            Color::Rgb(135, 135, 0),
            Color::Rgb(135, 135, 95),
            Color::Rgb(135, 135, 135),
            Color::Rgb(135, 135, 175),
            Color::Rgb(135, 135, 215),
            Color::Rgb(135, 135, 255),
            Color::Rgb(135, 175, 0),
            Color::Rgb(135, 175, 95),
            Color::Rgb(135, 175, 135),
            Color::Rgb(135, 175, 175),
            Color::Rgb(135, 175, 215),
            Color::Rgb(135, 175, 255),
            Color::Rgb(135, 215, 0),
            Color::Rgb(135, 215, 95),
            Color::Rgb(135, 215, 135),
            Color::Rgb(135, 215, 175),
            Color::Rgb(135, 215, 215),
            Color::Rgb(135, 215, 255),
            Color::Rgb(135, 255, 0),
            Color::Rgb(135, 255, 95),
            Color::Rgb(135, 255, 135),
            Color::Rgb(135, 255, 175),
            Color::Rgb(135, 255, 215),
            Color::Rgb(135, 255, 255),
            Color::Rgb(175, 0, 0),
            Color::Rgb(175, 0, 95),
            Color::Rgb(175, 0, 135),
            Color::Rgb(175, 0, 175),
            Color::Rgb(175, 0, 215),
            Color::Rgb(175, 0, 255),
            Color::Rgb(175, 95, 0),
            Color::Rgb(175, 95, 95),
            Color::Rgb(175, 95, 135),
            Color::Rgb(175, 95, 175),
            Color::Rgb(175, 95, 215),
            Color::Rgb(175, 95, 255),
            Color::Rgb(175, 135, 0),
            Color::Rgb(175, 135, 95),
            Color::Rgb(175, 135, 135),
            Color::Rgb(175, 135, 175),
            Color::Rgb(175, 135, 215),
            Color::Rgb(175, 135, 255),
            Color::Rgb(175, 175, 0),
            Color::Rgb(175, 175, 95),
            Color::Rgb(175, 175, 135),
            Color::Rgb(175, 175, 175),
            Color::Rgb(175, 175, 215),
            Color::Rgb(175, 175, 255),
            Color::Rgb(175, 215, 0),
            Color::Rgb(175, 215, 95),
            Color::Rgb(175, 215, 135),
            Color::Rgb(175, 215, 175),
            Color::Rgb(175, 215, 215),
            Color::Rgb(175, 215, 255),
            Color::Rgb(175, 255, 0),
            Color::Rgb(175, 255, 95),
            Color::Rgb(175, 255, 135),
            Color::Rgb(175, 255, 175),
            Color::Rgb(175, 255, 215),
            Color::Rgb(175, 255, 255),
            Color::Rgb(215, 0, 0),
            Color::Rgb(215, 0, 95),
            Color::Rgb(215, 0, 135),
            Color::Rgb(215, 0, 175),
            Color::Rgb(215, 0, 215),
            Color::Rgb(215, 0, 255),
            Color::Rgb(215, 95, 0),
            Color::Rgb(215, 95, 95),
            Color::Rgb(215, 95, 135),
            Color::Rgb(215, 95, 175),
            Color::Rgb(215, 95, 215),
            Color::Rgb(215, 95, 255),
            Color::Rgb(215, 135, 0),
            Color::Rgb(215, 135, 95),
            Color::Rgb(215, 135, 135),
            Color::Rgb(215, 135, 175),
            Color::Rgb(215, 135, 215),
            Color::Rgb(215, 135, 255),
            Color::Rgb(215, 175, 0),
            Color::Rgb(215, 175, 95),
            Color::Rgb(215, 175, 135),
            Color::Rgb(215, 175, 175),
            Color::Rgb(215, 175, 215),
            Color::Rgb(215, 175, 255),
            Color::Rgb(215, 215, 0),
            Color::Rgb(215, 215, 95),
            Color::Rgb(215, 215, 135),
            Color::Rgb(215, 215, 175),
            Color::Rgb(215, 215, 215),
            Color::Rgb(215, 215, 255),
            Color::Rgb(215, 255, 0),
            Color::Rgb(215, 255, 95),
            Color::Rgb(215, 255, 135),
            Color::Rgb(215, 255, 175),
            Color::Rgb(215, 255, 215),
            Color::Rgb(215, 255, 255),
            Color::Rgb(255, 0, 0),
            Color::Rgb(255, 0, 95),
            Color::Rgb(255, 0, 135),
            Color::Rgb(255, 0, 175),
            Color::Rgb(255, 0, 215),
            Color::Rgb(255, 0, 255),
            Color::Rgb(255, 95, 0),
            Color::Rgb(255, 95, 95),
            Color::Rgb(255, 95, 135),
            Color::Rgb(255, 95, 175),
            Color::Rgb(255, 95, 215),
            Color::Rgb(255, 95, 255),
            Color::Rgb(255, 135, 0),
            Color::Rgb(255, 135, 95),
            Color::Rgb(255, 135, 135),
            Color::Rgb(255, 135, 175),
            Color::Rgb(255, 135, 215),
            Color::Rgb(255, 135, 255),
            Color::Rgb(255, 175, 0),
            Color::Rgb(255, 175, 95),
            Color::Rgb(255, 175, 135),
            Color::Rgb(255, 175, 175),
            Color::Rgb(255, 175, 215),
            Color::Rgb(255, 175, 255),
            Color::Rgb(255, 215, 0),
            Color::Rgb(255, 215, 95),
            Color::Rgb(255, 215, 135),
            Color::Rgb(255, 215, 175),
            Color::Rgb(255, 215, 215),
            Color::Rgb(255, 215, 255),
            Color::Rgb(255, 255, 0),
            Color::Rgb(255, 255, 95),
            Color::Rgb(255, 255, 135),
            Color::Rgb(255, 255, 175),
            Color::Rgb(255, 255, 215),
            Color::Rgb(255, 255, 255),
            Color::Rgb(8, 8, 8),
            Color::Rgb(18, 18, 18),
            Color::Rgb(28, 28, 28),
            Color::Rgb(38, 38, 38),
            Color::Rgb(48, 48, 48),
            Color::Rgb(58, 58, 58),
            Color::Rgb(68, 68, 68),
            Color::Rgb(78, 78, 78),
            Color::Rgb(88, 88, 88),
            Color::Rgb(98, 98, 98),
            Color::Rgb(108, 108, 108),
            Color::Rgb(118, 118, 118),
            Color::Rgb(128, 128, 128),
            Color::Rgb(138, 138, 138),
            Color::Rgb(148, 148, 148),
            Color::Rgb(158, 158, 158),
            Color::Rgb(168, 168, 168),
            Color::Rgb(178, 178, 178),
            Color::Rgb(188, 188, 188),
            Color::Rgb(198, 198, 198),
            Color::Rgb(208, 208, 208),
            Color::Rgb(218, 218, 218),
            Color::Rgb(228, 228, 228),
            Color::Rgb(238, 238, 238),
        ]
    }
}

pub enum CursorShape {
    Block,
    Underline,
    Beam,
    HollowBlock,
    Hidden,
}

pub struct CursorState {
    pub shape: CursorShape,
    pub hidden: bool,
}

impl Default for CursorState {
    fn default() -> Self {
        Self {
            shape: CursorShape::Beam,
            hidden: false,
        }
    }
}

impl ToString for CursorState {
    fn to_string(&self) -> String {
        match self.shape {
            CursorShape::Block => "▒".to_string(),
            CursorShape::Underline => "_".to_string(),
            CursorShape::Beam => "|".to_string(),
            CursorShape::HollowBlock => "☐".to_string(),
            CursorShape::Hidden => "".to_string(),
        }
    }
}

pub struct Styles {
    pub active_background_color: Color,
    pub default_background_color: Color,
    pub active_text_color: Color,
    pub default_text_color: Color,
    pub font_size: u32,
    pub italic: bool,
    pub underline: bool,
    pub color_array: [Color; 256],
    pub cursor_state: CursorState,
}

impl Styles {
    pub fn to_color32(&mut self, color: Color) -> Color32 {
        match color {
            Color::Black => Color32::BLACK,
            Color::Red => Color32::RED,
            Color::Green => Color32::GREEN,
            Color::Yellow => Color32::YELLOW,
            Color::Blue => Color32::BLUE,
            Color::Magenta => Color32::from_rgb(0, 111, 184),
            Color::Cyan => Color32::from_rgb(111, 38, 113),
            Color::White => Color32::WHITE,
            Color::Gray => Color32::GRAY,
            Color::BrightRed => Color32::from_rgb(255, 0, 0),
            Color::BrightGreen => Color32::from_rgb(0, 255, 0),
            Color::BrightYellow => Color32::from_rgb(255, 255, 0),
            Color::BrightBlue => Color32::from_rgb(0, 0, 255),
            Color::BrightMagenta => Color32::from_rgb(255, 0, 255),
            Color::BrightCyan => Color32::from_rgb(0, 255, 255),
            Color::BrightWhite => Color32::from_rgb(255, 255, 255),
            Color::Rgb(r, g, b) => Color32::from_rgb(r, g, b),
            Color::Foreground => self.to_color32(self.active_text_color),
            Color::Background => self.to_color32(self.active_background_color),
            Color::ColorIndex(i) => self.to_color32(self.color_array[i as usize]),
        }
    }
    pub fn default() -> Self {
        Self {
            active_background_color: Color::Black,
            default_background_color: Color::Black,
            active_text_color: Color::White,
            default_text_color: Color::White,
            font_size: 16,
            italic: false,
            underline: false,
            color_array: Color::default_array(),
            cursor_state: CursorState::default(),
        }
    }
}
